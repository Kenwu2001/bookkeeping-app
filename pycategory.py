class Categories:
    """Maintain the category list and provide some methods."""
    def __init__(self):
        self._categories = ['expense', ['food', ['meal', 'snack', 'drink'], 'transportation', ['bus', 'railway']], \
                            'income', ['salary', 'bonus']]

    def view(self, L, level=0):
        if L==None: return
        if type(L) in {list,tuple}:
            for child in L:
                self.view(child, level+1)
        else:
            print(f'{" "*4*level}{L}')
 
    def is_category_valid(self, L, target):
        """check whether the input matches the name in category"""
        if type(L) == list:
            for i in L:
                p = self.is_category_valid(i,target)
                if p == True:
                    return p
        return L == target
 
    def find_subcategories(self, target):
        """find the target category and trasport the subcategories into a flat list"""
        # 1. Define the formal parameters so that a category name can be
        #    passed in and the method can be called recursively.
        # 2. Recursively find the target category and call the
        #    self._flatten method to get the subcategories into a flat list.
        # 3. Alternatively, define an inner function to do the recursion.
        def find_subcategories_gen(category, categories, found=False):
            """A generator that yields the target category and its subcategories"""
            if type(categories) == list:
                for index, child in enumerate(categories):
                    yield from find_subcategories_gen(category, child, found)
                    if child == category and index + 1 < len(categories) \
                        and type(categories[index + 1]) == list:
                        # When the target category is found,
                        # recursively call this generator on the subcategories
                        # with the flag set as True.
                        yield from find_subcategories_gen(category, categories[index+1], True)
            else:
                if categories == category or found == True:
                    yield categories
            # A generator that yields the target category and its subcategories
        
        return [i for i in find_subcategories_gen(target, self._categories)]
        # A list generated by find_subcategories_gen(category, self._categories)
        #return find(self._categories, target)